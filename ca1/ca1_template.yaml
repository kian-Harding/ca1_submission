
Parameters:
  BucketName: celebritybucket
    Type: String
    Default: grantp-s3-events-input-bucket

Resources:

  # Input bucket
  # We want items uploaded here to trigger the Lamba function
  InputBucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - ProcessingLambdaPermission
      - TriggerFunction
    Properties:
      BucketName: !Ref BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt TriggerFunction.Arn
    
  # Permission to let the S3 Bucket invoke the function
  ProcessingLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref TriggerFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::${BucketName}'
      SourceAccount: !Ref AWS::AccountId
    
  # Role for the Lambda Fuction
  TriggerFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      # Trust Policy - let Lambda become the role
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      # Access Policies - what the Lambda function can do          
      Policies: 
        - PolicyName: allowLogging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:*
              Resource: arn:aws:logs:*:*:*
        - PolicyName: getAndDeleteObjects
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - s3:GetObject
              - s3:DeleteObject
              Resource: !Sub 'arn:aws:s3:::${BucketName}/*'
    
  TriggerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
import json

s3 = boto3.client('s3')
dynamodb = boto3.resource('dynamodb')
rekognition = boto3.client('rekognition')

def lambda_handler(event, context):
    for record in event['Records']:
        # Get the S3 bucket and key where the object was uploaded
        bucket = record['s3']['bucket']['name']
        key = record['s3']['object']['key']

        # Analyze the picture with Amazon Rekognition
        response = rekognition.recognize_celebrities(
            Image={'S3Object': {'Bucket': bucket, 'Name': key}}
        )

        # Get the list of detected celebrities
        celebrities = []
        for celebrity in response['CelebrityFaces']:
            celebrities.append(celebrity['Name'])

        # Store the results in DynamoDB
        table = dynamodb.Table('test')
        table.put_item(
            Item={
                'ImageName': key,
                'detected_celebrities': celebrities,
                'upload_time': str(record['eventTime'])
            }
        )

    return {
        'statusCode': 200,
        'body': json.dumps('Picture analysis complete.')
    }
      Handler: index.handle_s3_event
      Role: !GetAtt TriggerFunctionExecutionRole.Arn
      Runtime: python3.9
        
Outputs:
    InputBucket:
      Value: !Ref InputBucket
    TriggerFunction:
      Value: !Ref TriggerFunction
